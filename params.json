{"name":"Stateless.js","tagline":"simpler pushstate","body":"# Stateless.js\r\n\r\n<img src=\"https://raw.githubusercontent.com/eugene-eeo/stateless.js/master/media/small.png\" hspace=\"10\" vspace=\"6\" align=\"left\"/>\r\n\r\nSimple, cross-browser ``pushState`` via changing the hash\r\nfragment. Mainly meant for ~~freeloading~~ serverless web\r\napplications or applications which need to store some state\r\nin the URL, and provides some nice conveniences like:\r\n\r\n - Preventing repeated processing of identical hashes- if you\r\n push the same hash twice it will not be processed twice. This\r\n is useful for example when you have some expensive\r\n calculations.\r\n - Ability to mark hashes as \"processed\"- they will still be\r\n pushed to the browser's history stack but they will not be\r\n processed by any Stateless handlers.\r\n\r\nThe recommended pattern is:\r\n\r\n```js\r\nStateless.onChange(function(fragment) {\r\n    div.innerText = fragment;\r\n});\r\n\r\n// Pull the current state from the URL\r\nStateless.pull();\r\n\r\n// Skip the already processed state\r\nStateless.skip(processed);\r\nStateless.push(processed);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}